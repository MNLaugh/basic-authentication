"use strict";

function end_empty() {}

function end_err(next, code) {
    return void 0 !== next ? next(new Error(code)) : new Error(code);
}

function end_work(err, next, code, res) {
    if (void 0 === code) return void 0 !== next ? next() : !0;
    var codes = http[code];
    return void 0 !== res && (res.writeHead(code), res.end(codes)), err(next, codes);
}

function end_check(auth, hash) {
    return auth !== hash;
}

function end_check_file(auth, hash, file) {
    var ii, hashes = crypto(hash), input = require("fs").readFileSync(file, {
        encoding: "utf8"
    }).match(end);
    ii = input.length ? input.length : 0;
    var request = basic_legacy(auth, !0), psw = hashes.update(request.password).digest("hex");
    request = new RegExp("^" + request.user + ":");
    for (var i = 0; ii > i; i++) if (request.test(input[i])) {
        var get = input[i].substring(request.source.length - 1);
        if (get === psw) return !1;
    }
    return !0;
}

function basic_legacy(req, force) {
    var auth;
    return force === !0 ? (auth = new Buffer(req, "base64").toString(), auth = auth.match(basic), 
    {
        user: auth[1],
        password: auth[2]
    }) : void 0 !== req.headers && void 0 !== (auth = req.headers.authorization) && (auth = auth.match(reg)) && void 0 !== auth[1] && (auth = new Buffer(auth[1], "base64").toString().match(basic), 
    void 0 !== auth) ? {
        user: auth[1],
        password: auth[2]
    } : Object.create(null);
}

function basic_small(req) {
    var auth;
    return void 0 !== req.headers && void 0 !== (auth = req.headers.authorization) && reg.test(auth) === !0 ? auth.substring(6) : "";
}

function authentication(opt) {
    function wrapper_medium() {
        var check = end_check;
        my.file && (check = end_check_file);
        var err = end_err;
        return my.suppress && (err = end_empty), function(req, res, next) {
            var auth = basic_small(req);
            return "" !== auth ? check(auth, my.hash, my.file) === !0 ? (setHeader(res, "WWW-Authenticate", my.realms, !0), 
            end_work(err, next, 401)) : "" === my.agent || my.agent === req.headers["user-agent"] ? end_work(err, next) : end_work(err, next, 403) : (res.writeHead(401, my.realm), 
            res.end());
        };
    }
    function wrapper_big() {
        var check = end_check;
        my.file && (check = end_check_file);
        var err = end_err;
        return my.suppress && (err = end_empty), function(req, res, next) {
            var auth = basic_small(req);
            return "" !== auth ? check(auth, my.hash, my.file) === !0 ? (setHeader(res, "WWW-Authenticate", my.realms, !0), 
            end_work(err, next, 401, res)) : "" === my.agent || my.agent === req.headers["user-agent"] ? end_work(err, next) : end_work(err, next, 403, res) : (res.writeHead(401, my.realm), 
            res.end(http[401]));
        };
    }
    var options = opt || Object.create(null), my = {
        file: Boolean(options.file),
        agent: String(options.agent || ""),
        realm: String(options.realm || "Authorization required"),
        suppress: Boolean(options.suppress)
    };
    if (my.realms = 'Basic realm="' + my.realm + '"', my.realm = {
        "WWW-Authenticate": my.realms
    }, my.file) {
        if (my.hash = String(options.hash || "md5"), my.file = require("path").resolve(String(options.file)), 
        !require("fs").existsSync(my.file)) {
            var err = my.file + " not exists";
            throw new Error(err);
        }
    } else {
        var user = String(options.user || "admin"), password = String(options.password || "password");
        my.hash = new Buffer(user + ":" + password).toString("base64");
    }
    return Boolean(options.legacy) ? basic_legacy : Boolean(options.functions) ? basic_small : (options.ending === !1 ? 0 : 1) ? wrapper_big() : wrapper_medium();
}

var http = require("http").STATUS_CODES, crypto = require("crypto").createHash, setHeader = require("setheaders"), reg = new RegExp(/^Basic (.*)$/), basic = new RegExp(/^([^:]*):(.*)$/), end = new RegExp(/(.+)/g);

module.exports = authentication;
